//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use std::path::{Path, PathBuf};

use crate::{
    date_serializer::human_readable_opt,
    types::{NodeType, RelativePathSql},
};
use sea_orm::entity::prelude::*;
use chrono::naive::NaiveDateTime;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "node")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub r#type: NodeType,
    pub title: Option<String>,
    pub url: Option<String>,
    #[serde(with = "human_readable_opt")]
    pub created: Option<NaiveDateTime>,
    pub file: Option<RelativePathSql>,
    pub original_id: Option<String>,
}

impl Model {
    pub fn into_abs_path(self, base: &Path) -> ModelAbsPath {
        ModelAbsPath {
            id: self.id,
            r#type: self.r#type,
            title: self.title,
            url: self.url,
            created: self.created,
            file: self.file.map(|rel_path| rel_path.0.to_path(base)),
            original_id: self.original_id,
        }
    }
}

#[derive(Clone, Debug, Serialize)]
pub struct ModelAbsPath {
    pub id: i32,
    pub r#type: NodeType,
    pub title: Option<String>,
    pub url: Option<String>,
    #[serde(with = "human_readable_opt")]
    pub created: Option<NaiveDateTime>,
    pub file: Option<PathBuf>,
    pub original_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::telegram::Entity")]
    Telegram,
}

impl Related<super::telegram::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Telegram.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
